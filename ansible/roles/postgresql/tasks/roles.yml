- name: Configure PostgreSQL    
  become: yes
  become_user: postgres
  vars:
    db_user1: local
    db_user2: remote
    db_user3: backup
    db_name1: dblocal
    db_name2: dbremote
  block:
  - name: Create databases
    community.postgresql.postgresql_db:
      name: "{{ item }}"
      state: present
    loop:
      - "{{ db_name1 }}"
      - "{{ db_name2 }}"

  - name: Create database users with exclusive access
    community.postgresql.postgresql_user:
      db: "{{ item.db }}"
      name: "{{ item.user }}"
      password: "{{ item.pass }}"
      state: present
    loop:
      - { user: '{{ db_user1 }}', pass: 'password1', db: '{{ db_name1 }}' }
      - { user: '{{ db_user2 }}', pass: 'password2', db: '{{ db_name2 }}' }

  - name: User access for local and remote users
    community.postgresql.postgresql_privs:
      db: "{{ item.db }}"
      roles: "{{ item.user }}"
      type: database
      obj: "{{ item.db }}"
      privs: ALL
      grant_option: no
    loop:
      - { user: '{{ db_user1 }}', db: '{{ db_name1 }}' }
      - { user: '{{ db_user2 }}', db: '{{ db_name2 }}' }

  - name: Create a read-only user accessible from localhost
    community.postgresql.postgresql_user:
      name: "{{ db_user3 }}"
      password: 'readonly_pass'
      state: present
      role_attr_flags: LOGIN,NOSUPERUSER,INHERIT

  - name: User access for backup user
    ansible.builtin.shell:
      cmd: psql -c "GRANT SELECT ON ALL TABLES IN SCHEMA public TO {{ db_user3 }};"

